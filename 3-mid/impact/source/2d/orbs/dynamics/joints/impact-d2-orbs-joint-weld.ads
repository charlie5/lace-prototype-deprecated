package impact.d2.orbs.Joint.weld
--
--
--
is

--  #ifndef B2_WELD_JOINT_H
--  #define B2_WELD_JOINT_H
--
--  #include <Box2D/Dynamics/Joints/b2Joint.h>
--
--  /// Weld joint definition. You need to specify local anchor points
--  /// where they are attached and the relative body angle. The position
--  /// of the anchor points is important for computing the reaction torque.
--  struct b2WeldJointDef : public b2JointDef
--  {
--          b2WeldJointDef()
--          {
--                  type = e_weldJoint;
--                  localAnchorA.Set(0.0f, 0.0f);
--                  localAnchorB.Set(0.0f, 0.0f);
--                  referenceAngle = 0.0f;
--          }
--
--          /// Initialize the bodies, anchors, and reference angle using a world
--          /// anchor point.
--          void Initialize(b2Body* body1, b2Body* body2, const b2Vec2& anchor);
--
--          /// The local anchor point relative to body1's origin.
--          b2Vec2 localAnchorA;
--
--          /// The local anchor point relative to body2's origin.
--          b2Vec2 localAnchorB;
--
--          /// The body2 angle minus body1 angle in the reference state (radians).
--          float32 referenceAngle;
--  };
--
--  /// A weld joint essentially glues two bodies together. A weld joint may
--  /// distort somewhat because the island constraint solver is approximate.
--  class b2WeldJoint : public b2Joint
--  {
--  public:
--          b2Vec2 GetAnchorA() const;
--          b2Vec2 GetAnchorB() const;
--
--          b2Vec2 GetReactionForce(float32 inv_dt) const;
--          float32 GetReactionTorque(float32 inv_dt) const;
--
--  protected:
--
--          friend class b2Joint;
--
--          b2WeldJoint(const b2WeldJointDef* def);
--
--          void InitVelocityConstraints(const b2TimeStep& step);
--          void SolveVelocityConstraints(const b2TimeStep& step);
--
--          bool SolvePositionConstraints(float32 baumgarte);
--
--          b2Vec2 m_localAnchorA;
--          b2Vec2 m_localAnchorB;
--          float32 m_referenceAngle;
--
--          b2Vec3 m_impulse;
--
--          b2Mat33 m_mass;
--  };
--
--  #endif
   procedure dummy;

end impact.d2.orbs.Joint.weld;
